CSE 331 Homework 3.  Answers to Written questions.
Edit this file to supply your answers.

Name:  Ethan Pyke

Problem 6.

(a) Fibonacci failed the testThrowsIllegalArgumentException test because in Fibonacci, when the number 0
	was passed in, it took 0 to be a negative number so it threw the exception even though 0 is a 
	nonnegative number.  In order to fix this, I changed the test case from if(n <= 0) to if(n < 0) so 
	that it only tested for truly negative numbers.

(b) Fibonacci failed the testBaseCase test because when the of the same reason the 
	testThrowsIllegalArgumentException failed.  Instead of returning 1, it threw the exception.  This 
	was fixed with the same change for the first test.

(c) Fibonacci failed the testInductiveCase test because the code was subtracting all of the numbers 
	instead of adding up all of the Fibonacci sequence to get to the correct index of the sequence.  
	Additionally, one of the base cases was incorrect where when n was 2, it returned 1.  The only time 
	1 should have been returned was if n was equal to 0 or 1.

Problem 7. 

(a) Ball had two main issues that had to be addressed.  The first was that its constructor did not 
	initialize the balls volume correctly.	Since the passed in parameter was the same as the name of the
	private volume field, I changed the statement 'volume = volume;' to 'this.volume = volume;' to fix 
	this.  Before this the program did not know which volume it was updating.  Now it is clear that the
	private volume field is being updated to be equal to the passed parameter.	The other problem with 
	this class was that getVolume() returned 0 instead of actually returning the balls volume.  I updated
	the method to return volume.
	
(b) I think the approach that involves keeping track of the total volume in the container whenever balls
 	are added and removed is the better method because that way each time getVolume() is called, it does
 	not have to loop through the set each time it is called.
 	
(c)  i -- One way to implement getBallsFromSmallest() is the method in which I used.  In my method, in 
	 	  order to return an Iterator<Ball> with all the balls sorted, I created a LinkedList. Then, I 
	 	  added all the balls from the ballContainer to the list by looking at each ball and comparing
		  its volume to each ball in the LinkedList until the right index was reached so that the ball was
		  sorted by its volume.  Then it moves onto the next ball in the ballContainer and repeats
		  (an InsertionSort).  A second way to implement getBallsFromSmallest() is to instead of sorting
		  the balls when getBallsFromSmallest() is called, sort the balls each time a ball is added so that
		  the box will always be sorted.
	ii -- I think the second method is best because it reduces the amount of times the sorted order has to
		  be determined.  By making the box sorted from the beginning, it makes it so less processing is
		  required overall.
		 
