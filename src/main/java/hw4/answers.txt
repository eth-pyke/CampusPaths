CSE 331 Homework 4.  Answers to Written questions.
Edit this file to supply your answers.

Name:  Ethan Pyke

Problem 0.

(a)
r = p * q:
	Let the terms of p be p_0, ..., p_n-1 and the terms of q be q_0, ..., q_m-1.
	Set r = 0
	Set i = 0
	
	{{Inv: r = (p_0, ..., p_i-1) * (q_0, ..., q_m-1)}}
	While i < n:
		Set j = 0
		
		{{Inv: r = (p_0, ..., p_i-1) * (q_0, ..., q_j-1)}}
		While j < m
			Set r = r + p_i multiplied by q_j
			Set j = j + 1
		Set i = i + 1
	return r
	
(b)
q = u / v
	Let the terms of u be u_0, ..., u_n-1 and the terms of v be v_0, ..., v_m-1 in sorted order.
	Set r = u
	Set q = 0
	
	{{Inv: u = q * v + r}
	While r is not 0 and v_0's degree <= r_0's degree
		Set temp = (r_0's coefficient / v_0's coefficient) * variable^(r_0's degree - v_0's degree)
		
		Set q = q + temp
		Set r = r - (v * temp)
	return q
		
(c)
	u = x^3 + x - 1
	v = x + 1
	r = x^3 + x - 1
	q = 0
	temp = 0
	
	While v_0's degree (1) <= r_0's degree
		Iteration 0: r = x^3 + x - 1, v = x + 1, q = 0
			[Set temp = (r_0's coefficient / v_0's coefficient) * 
							variable^(r_0's degree - v_0's degree)] now temp = x^2
			[Set q = q + temp] now q = 0 + x^2
			[Set r = r - (v * temp)] now r = -x^2 + x - 1
			
		Iteration 1: r = -x^2 + x - 1, v = x + 1, q = x^2 
			[Set temp = (r_0's coefficient / v_0's coefficient) * 
							variable^(r_0's degree - v_0's degree)] now temp = -x
			[Set q = q + temp] now q = x^2 - x
			[Set r = r - (v * temp)] now r = 2x - 1
			
		Iteration 1: r = 2x - 1, v = x + 1, q = x^2 - x
			[Set temp = (r_0's coefficient / v_0's coefficient) * 
							variable^(r_0's degree - v_0's degree)] now temp = 2
			[Set q = q + temp] now q = x^2 - x + 2
			[Set r = r - (v * temp)] now r = -3	
	
	We are done! q = x^2 - x + 2 (with r = -3)							

Problem 1.

(a)	The constructor that takes in both a numerator and denominator because now that the Rep 
	Invariant says things do not have to be simplified, the constructor does not have to simplify
	so that entire part of the constructor can be removed. Additionally, the checkRep() method
	would have to change because now that the Rep Invariant no longer requires the numbers to be 
	simplified, the method no longer has to	check if fraction is simplified.  Also, the equals 
	method would have to change because it currently only checks if the numerator and denominator
	are the same so a non-simplified would not be equal to a simplified form.

(b)	Changing the form of returning a new RatNum to instead changing the RatNum's fields would fail
	to meet the specifications because the RatNum is an immutable class meaning its instances
	cannot be modified.  This means that if the proposed implementation was implemented, it would
	fail to meet the specification of the RatNum class of being immutable.

(c)	In RatNum it is sufficient to call checkRep only at the end of constructors because the RatNum
	class is an immutable class meaning that its instances are the same throughout every process.
	Thus, since the class is immutable, any method would not change anything that could affect the
	Rep Invariant so calling it simply after it was constructed would suffice.

Problem 2.

(a)	I did not include any calls to checkRep because each time a new RatTerm was created, its
	constructor already makes a call to checkRep when it is created.  Additionally, since the
	object is immutable, there is no further need to call checkRep any more.

(b)	If the Rep Invariant is changed, obviously the constructor would have to be changed so that
	it no longer has to check if the coefficient is 0 because even if it is, the exponent can
	be any number so this makes the code less complex.  Because none of the other methods rely on
	the exponent if the coefficient is 0, no other methods have to be changed.

(c)	If a restriction was added to NaN RatTerm's, the constructor would have to be changed so that
	if the coefficient is NaN, the exponent must be changed to 0.  This would simply one thing
	added to the constructor and would make the code a little more complex but not much.  None of
	the other methods really depend on a NaN's coefficient so nothing else is changed.

Problem 5.
	1) 6*x^6+5*x^5+4*x^4+3*x^3+2*x^2+x+1
	2) 5*x^7+3*x^5+x^3+1/2*x
	3) -2*x^8+4*x^6-6*x^4+8*x^2-10
	4) 11/3*x^3+1453*x^2+10*x+11
